// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
    binaryTargets = ["native", "rhel-openssl-1.0.x"]

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String       @id @default(uuid())
  name              String
  email             String       @unique
  password          String
  bloodType         String
  location          String
  availability      Boolean      @default(false)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  userProfile           UserProfile?

  donorRequests     Request[]    @relation("DonorRequests")
  requesterRequests Request[]    @relation("RequesterRequests")
}

model Request {
  id                String       @id @default(uuid())
  
  donorId           String
  requesterId       String
  phoneNumber       String
  dateOfDonation    String
  hospitalName      String
  hospitalAddress   String
  reason            String
  requestStatus     RequestStatus @default(PENDING)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  requester     User         @relation("RequesterRequests", fields: [requesterId], references: [id])
  donor         User         @relation("DonorRequests", fields: [donorId], references: [id])
 @@unique([donorId, requesterId]) 
  @@map("requests")
}

model UserProfile {
  id                String       @id @default(uuid())
  bio               String
  age               Int 
  lastDonationDate  String
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  userId            String       @unique

  user              User         @relation(fields: [userId], references: [id])

  @@map("user_profiles")
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}


// enum BloodGroup {
//    A+
//     A-
//     B+
//     B-
//     AB+
//     AB-
//     O+
//     O-
// }